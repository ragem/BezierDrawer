{"version":3,"sources":["serviceWorker.js","Components/BezierDrawer/BezierDrawer.component.js","index.js"],"names":["Boolean","window","location","hostname","match","BezierDrawer","controlpoints","React","createRef","canvas","precision","this","current","value","drawCurve","generateRandomCoords","t","plist","order","length","y","x","i","binom","Math","pow","n","k","coeff","count","coords","floor","random","push","ctx","getContext","getBoundingClientRect","clearRect","width","height","accuracy","parseFloat","p","beginPath","moveTo","fillText","fillRect","bezier","lineTo","stroke","closePath","ref","className","htmlFor","type","id","step","onClick","onDrawClick","renderCanvas","renderControls","PureComponent","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2d7532a.chunk.js","sourcesContent":["// eslint-disable-next-line\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                // eslint-disable-next-line no-use-before-define\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                // eslint-disable-next-line no-use-before-define\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            // eslint-disable-next-line no-param-reassign\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React, { PureComponent } from 'react';\n\nclass BezierDrawer extends PureComponent {\n    constructor() {\n        super();\n        this.controlpoints = React.createRef();\n        this.canvas = React.createRef();\n        this.precision = React.createRef();\n    }\n\n    onDrawClick() {\n        const controlpoints = this.controlpoints.current.value;\n        this.drawCurve(this.generateRandomCoords(controlpoints));\n    }\n\n    bezier(t, plist) {\n        const order = plist.length - 1;\n\n        let y = 0;\n        let x = 0;\n\n        for (let i = 0; i <= order; i++) {\n            // eslint-disable-next-line no-restricted-properties\n            x += (this.binom(order, i) * Math.pow((1 - t), (order - i)) * Math.pow(t, i) * (plist[i].x));\n            // eslint-disable-next-line no-restricted-properties\n            y += (this.binom(order, i) * Math.pow((1 - t), (order - i)) * Math.pow(t, i) * (plist[i].y));\n        }\n\n        return {\n            x, y\n        };\n    }\n\n    binom(n, k) {\n        let coeff = 1;\n        for (let i = n - k + 1; i <= n; i++) coeff *= i;\n        for (let i = 1; i <= k; i++) coeff /= i;\n        return coeff;\n    }\n\n    generateRandomCoords(count) {\n        const coords = [];\n        for (let i = 0; i < count; i++) {\n            const x = Math.floor(Math.random() * 500);\n            const y = Math.floor(Math.random() * 500);\n            coords.push({ x, y });\n        }\n        return coords;\n    }\n\n    drawCurve(plist) {\n        const ctx = this.canvas.current.getContext('2d');\n        const canvas = this.canvas.current.getBoundingClientRect();\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        const accuracy = parseFloat(this.precision.current.value);\n        ctx.beginPath();\n        ctx.moveTo(plist[0].x, plist[0].y);\n\n        // eslint-disable-next-line no-restricted-syntax\n        for (const p in plist) {\n            if (p) {\n                ctx.fillText(p, plist[p].x + 5, plist[p].y - 5);\n                ctx.fillRect(plist[p].x - 5, plist[p].y - 5, 2, 2);\n            }\n        }\n\n        for (let i = 0; i < 1; i += accuracy) {\n            const { x, y } = this.bezier(i, plist);\n            ctx.lineTo(x, y);\n        }\n\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    renderCanvas() {\n        return (\n            <canvas\n              ref={ this.canvas }\n              className=\"Canvas\"\n              width={ 500 }\n              height={ 500 }\n            />\n        );\n    }\n\n    renderControls() {\n        return (\n            <div className=\"controls\">\n                <label htmlFor=\"controlpoints\">\n                    Number of control points\n                    <input type=\"number\" ref={ this.controlpoints } id=\"controlpoints\" />\n                </label>\n                <label htmlFor=\"precision\">\n                    step precision\n                    <input type=\"number\" ref={ this.precision } id=\"precision\" step=\"0.001\" />\n                </label>\n                <button onClick={ () => this.onDrawClick() }>\n                    Draw\n                </button>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                { this.renderCanvas() }\n                { this.renderControls() }\n            </div>\n        );\n    }\n}\n\nexport default BezierDrawer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport BezierDrawer from './Components/BezierDrawer';\n\nReactDOM.render(<BezierDrawer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}